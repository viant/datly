init:
  functionRole: DatlyS3Listener
  functionName: DatlyS3Listener
  srcCode: ${appPath}/gateway/runtime/lambda/s3
  codeZip: ${srcCode}/datly.zip
  bucketName: {}
  bucketConfig: $LoadJSON(${env.HOME}/.datly_dev/lambda/datly-s3.json)
  privilegePolicy: policy/datly.json

pipeline:
  print:
    action: print
    message: $AsJSON($bucketConfig)
  deploy:
    build:
      action: exec:run
      target: $target
      sleepTimeMs: 1500
      checkError: true
      commands:
        - cd ${srcCode}
        - unset GOPATH
        - export GOOS=linux
        - export GOARCH=amd64
        - go build -o datly
        - zip -j datly.zip datly

    setupFunction:
      action: aws/lambda:deploy
      credentials: $awsCredentials
      timeout: 540
      environment:
        variables:
          CONFIG_URL: s3://${bucketConfig.BucketName}/${appName}/config.json
          LOGGING: true
      functionname: $functionName
      runtime:  go1.x
      handler: datly
      code:
        zipfile: $LoadBinary(${codeZip})
      rolename: DatlyS3Listener
      define:
        - policyname: s3-${bucketConfig.BucketName}-role
          policydocument: $Cat('${privilegePolicy}')
      attach:
        - policyarn: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

    notification:
      action: aws/s3:setupBucketNotification
      credentials: $awsCredentials
      sleepTimeMs: 20000
      bucket: ${bucketConfig.BucketName}
      lambdaFunctionConfigurations:
        - functionName: $functionName
          id: ObjectCreatedEvents
          events:
            - s3:ObjectCreated:*
          filter:
            suffix:
              - .async